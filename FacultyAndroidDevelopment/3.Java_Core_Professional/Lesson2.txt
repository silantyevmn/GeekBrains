/**
 * ru.silantyevmn.java_core_professinal.lesson2
 * Created by Михаил Силантьев on 15.11.2017.
 * <p>
 * 1. Сформировать таблицу товаров (id, prodid, title, cost) запросом из Java приложения.
 * id - порядковый номер записи, первичный ключ
 * prodid - уникальный номер товара
 * title - название товара
 * cost - стоимость
 * 2. При запуске приложения очистить таблицу и заполнить 10.000 товаров вида:
 * <p>
 * id_товара 1 товар1 10
 * id_товара 2 товар2 20
 * id_товара 3 товар3 30
 * …
 * id_товара 10000 товар10000 100000
 * 3. Написать консольное приложение, которое позволяет узнать цену товара по его имени, либо вывести сообщение "Такого товара нет" если товара не в базе. Консольная команда: "/цена товар545"
 * <p>
 * 4. Добавить возможность изменения цены товара (указываем имя товара и новую цену). Консольная команда: "/сменитьцену товар10 10000"
 * <p>
 * 5. Вывести товары в заданном ценовом диапазоне. Консольная команда: "/товарыпоцене 100 600"
 */
public class Lesson2 {

    private static Connection connection;
    private static Statement statement;
    private static PreparedStatement ps;
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        try {
            connect();
            createTable();
            clearTable();
            addData();
            findBase();
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } finally {
            disconnect();
        }
    }

    private static void findBase() throws SQLException {
        System.out.println("Введите комаду:");
        String textScanner = scanner.nextLine();
        String[] arr = textScanner.split(" ");
        String textResult = "";

        try {
            if (textScanner.length() < 1) {
                System.out.println("Вы не ввели команду!\nПопробуйте еще раз.");
                findBase();
            } else if (arr[0].startsWith("/")) {
                switch (arr[0]) {
                    case "/цена": {
                        //поиск по товару "/цена товар545"
                        textResult = "SELECT * FROM products WHERE title='" + arr[1] + "'";
                        selectBase(textResult);
                        break;
                    }
                    case "/сменитьцену": {
                        //сменить цену товара "/сменитьцену товар10 10000"
                        int cost = Integer.parseInt(arr[2]);
                        updateBase(arr[1], cost);
                        break;
                    }
                    case "/товарыпоцене": {
                        //вывести товары по цене "/товарыпоцене 100 600"
                        int cost1=Integer.parseInt(arr[1]);
                        int cost2=Integer.parseInt(arr[2]);
                        textResult = "SELECT * FROM products WHERE cost>=" + cost1 + " and cost<=" + cost2;
                        selectBase(textResult);
                        break;
                    }
                    default: {
                        System.out.println("Ошибка в запросе. Нет такой команды: "+textScanner);
                        findBase();
                        break;
                    }
                }
            } else {
                System.out.println("Нет такого запроса");
            }
        } catch (NumberFormatException e) {
            System.out.println("Не верно ввели цену товара!");
            findBase();
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Ошибка в аргументах!");
            findBase();
        }
    }

    private static void updateBase(String title, int cost) throws SQLException {
        connection.setAutoCommit(false);
        ps = connection.prepareStatement("UPDATE products SET cost=? WHERE title=?;");
        ps.setInt(1, cost);
        ps.setString(2, title);
        ps.executeUpdate();
        connection.commit();
        selectBase("SELECT * FROM products WHERE title='" + title + "'");

    }

    private static void selectBase(String textResult) throws SQLException {
        ResultSet result = statement.executeQuery(textResult + ";");
        boolean isNext = result.next();
        if (!isNext) {
            System.out.println("Такого товара нет в базе!");
            return;
        } else {
            while (isNext) {
                System.out.println(result.getString("title") + " " + result.getInt(4));
                isNext = result.next();
            }
            System.out.println("Запрос выполнен.");
        }
    }

    private static void disconnect() {
        try {
            statement.close();
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void connect() throws SQLException, ClassNotFoundException {
        Class.forName("org.sqlite.JDBC");
        connection = DriverManager.getConnection("jdbc:sqlite:sqlBase.db");
        statement = connection.createStatement();
    }

    private static void addData() throws SQLException {
        connection.setAutoCommit(false);
        ps = connection.prepareStatement("INSERT INTO products( prodid, title, cost) VALUES (?,?,?);");
        for (int i = 1; i <= 10000; i++) {
            ps.setInt(1, i);
            ps.setString(2, "товар" + i);
            ps.setInt(3, (i * 10));
            ps.executeUpdate();
        }
        connection.commit();
    }

    private static void clearTable() throws SQLException {
        statement.execute("DELETE FROM products;");
    }

    private static void createTable() throws SQLException {
        statement.execute("CREATE TABLE IF NOT EXISTS products(id INTEGER  PRIMARY KEY AUTOINCREMENT NOT NULL," +
                "prodid UNIQUE NOT NULL, title TEXT NOT NULL, cost DECIMAL NOT NULL" +
                ");");
    }
}
