package ru.silantyevmn.java_core_professinal.lesson5;

import java.util.concurrent.*;


/**
 * ru.silantyevmn.java_core_professinal.lesson5
 * Created by Михаил Силантьев on 30.11.2017.
 * Что примерно должно получиться
 * <p>
 * ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Подготовка!!!
 * Участник #2 готовится
 * Участник #1 готовится
 * Участник #4 готовится
 * Участник #3 готовится
 * Участник #2 готов
 * Участник #4 готов
 * Участник #1 готов
 * Участник #3 готов
 * ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка началась!!!
 * Участник #2 начал этап: Дорога 60 метров
 * Участник #4 начал этап: Дорога 60 метров
 * Участник #3 начал этап: Дорога 60 метров
 * Участник #1 начал этап: Дорога 60 метров
 * Участник #1 закончил этап: Дорога 60 метров
 * Участник #3 закончил этап: Дорога 60 метров
 * Участник #3 готовится к этапу(ждет): Тоннель 80 метров
 * Участник #1 готовится к этапу(ждет): Тоннель 80 метров
 * Участник #1 начал этап: Тоннель 80 метров
 * Участник #3 начал этап: Тоннель 80 метров
 * Участник #4 закончил этап: Дорога 60 метров
 * Участник #4 готовится к этапу(ждет): Тоннель 80 метров
 * Участник #2 закончил этап: Дорога 60 метров
 * Участник #2 готовится к этапу(ждет): Тоннель 80 метров
 * Участник #3 закончил этап: Тоннель 80 метров
 * Участник #1 закончил этап: Тоннель 80 метров
 * Участник #2 начал этап: Тоннель 80 метров
 * Участник #4 начал этап: Тоннель 80 метров
 * Участник #3 начал этап: Дорога 40 метров
 * Участник #1 начал этап: Дорога 40 метров
 * Участник #3 закончил этап: Дорога 40 метров
 * Участник #3 - WIN
 * Участник #1 закончил этап: Дорога 40 метров
 * Участник #4 закончил этап: Тоннель 80 метров
 * Участник #4 начал этап: Дорога 40 метров
 * Участник #2 закончил этап: Тоннель 80 метров
 * Участник #2 начал этап: Дорога 40 метров
 * Участник #2 закончил этап: Дорога 40 метров
 * Участник #4 закончил этап: Дорога 40 метров
 * ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка закончилась!!!
 */
public class MainClass {
    public static final int CARS_COUNT = 20;
    public static final Semaphore SEMAPHORE_TUNNEL = new Semaphore(CARS_COUNT / 2,true); //количество машин проезжающих по тунелю
    public static CyclicBarrier barrier=new CyclicBarrier(CARS_COUNT+1); // количество действий до вывода сообщений
    public static volatile int WIN_COUNT=3; //маскимальное количество мест победителей гонки
    public static volatile int WIN=0; //место победителя

    public static void main(String[] args) throws InterruptedException, BrokenBarrierException {
        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Подготовка!!!");
        Race race = new Race(new Road(60), new Tunnel(), new Road(40));
        Car[] cars = new Car[CARS_COUNT];
        Object monitor=new Object();
        for (int i = 0; i < cars.length; i++) {
            cars[i] = new Car(monitor,barrier,race, 20 + (int) (Math.random() * 10));
        }
        for (int i = 0; i < cars.length; i++) {
            new Thread(cars[i]).start();
        }
        barrier.await(); //ждем пока все учасники не будут готовы
        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка началась!!!");
        barrier.await();
        barrier.await(); //ждем пока все учасники не закончат гонку
        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка закончилась!!!");
    }
}

